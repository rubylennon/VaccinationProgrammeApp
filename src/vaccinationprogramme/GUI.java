/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vaccinationprogramme;

//imports
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;

//Icon Reference 'appointment.png' - https://www.flaticon.com/free-icon/appointment_2764442?term=medical%20appointment&page=1&position=8&page=1&position=8&related_id=2764442&origin=search

/*
 * Data Structures & Algorithms CA1 Pt.2
 * @author Ruby Lennon
 * Student Number: x19128355
 * 6th March 2021
 * GUI.java
 */
public class GUI extends javax.swing.JFrame {
    //Create instance of ArrayList Person as list
    ArrayList <Person> list;
    //String required for searching initial Patient ArrayList
    String searchTerm;
    private final PQInterface myPQueue;
    
    //boolean - used to determine if the user has clicked the prioritize button
    boolean prioritiseButtonClicked;
     
    //button counters
    int scheduleButtonCounter;
    
    //priority instance counters - increase each time patient is added to a specific priority group
    int priorityOneCounter;
    int priorityTwoCounter;
    int priorityThreeCounter;
    int priorityFourCounter;
    int priorityFiveCounter;
    int prioritySixCounter;
    int prioritySevenCounter;
    int priorityEightCounter;
    int priorityNineCounter;
    int priorityTenCounter;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        myPQueue = new MyPriorityQueue();
        //inistialise GUI components
        initComponents();
        list = new ArrayList<Person>();
        //sets the Medical Condition Yes No Radio Button Group to No by default
        medConNoRb.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medConRbg = new javax.swing.ButtonGroup();
        exitBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTa = new javax.swing.JTextArea();
        mainTtl = new javax.swing.JLabel();
        patientDetailsJPnl = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        nameTf = new javax.swing.JTextField();
        ageLbl = new javax.swing.JLabel();
        ageTf = new javax.swing.JTextField();
        medConLbl = new javax.swing.JLabel();
        medConYesRb = new javax.swing.JRadioButton();
        medConNoRb = new javax.swing.JRadioButton();
        phaseOneJPnl = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        numPatientInListBtn = new javax.swing.JButton();
        phaseTwoJPnl = new javax.swing.JPanel();
        prioritiseBtn = new javax.swing.JButton();
        numPatientInQBtn = new javax.swing.JButton();
        printQueueBtn = new javax.swing.JButton();
        phaseThreeJPnl = new javax.swing.JPanel();
        dequeueBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        displayTa.setEditable(false);
        displayTa.setColumns(20);
        displayTa.setRows(5);
        displayTa.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));
        jScrollPane1.setViewportView(displayTa);

        mainTtl.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        mainTtl.setText("COVID-19 Vaccination Programme Application");

        patientDetailsJPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Details Form", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        patientDetailsJPnl.setName(""); // NOI18N

        nameLbl.setText("Name:");

        ageLbl.setText("Age:");

        medConLbl.setText("Medical Condition:");

        medConRbg.add(medConYesRb);
        medConYesRb.setText("Yes");
        medConYesRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medConYesRbActionPerformed(evt);
            }
        });

        medConRbg.add(medConNoRb);
        medConNoRb.setText("No");
        medConNoRb.setNextFocusableComponent(addBtn);

        javax.swing.GroupLayout patientDetailsJPnlLayout = new javax.swing.GroupLayout(patientDetailsJPnl);
        patientDetailsJPnl.setLayout(patientDetailsJPnlLayout);
        patientDetailsJPnlLayout.setHorizontalGroup(
            patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientDetailsJPnlLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(medConLbl)
                    .addComponent(nameLbl)
                    .addComponent(ageLbl))
                .addGap(18, 18, 18)
                .addGroup(patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientDetailsJPnlLayout.createSequentialGroup()
                        .addComponent(medConYesRb)
                        .addGap(18, 18, 18)
                        .addComponent(medConNoRb))
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageTf, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        patientDetailsJPnlLayout.setVerticalGroup(
            patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientDetailsJPnlLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl)
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(patientDetailsJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medConNoRb)
                    .addComponent(medConYesRb)
                    .addComponent(medConLbl))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        phaseOneJPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phase One", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        addBtn.setText("Add New Patient");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search By Name");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete By Name ");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        printBtn.setText("Print Patient List");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        numPatientInListBtn.setText("No. Patient in List");
        numPatientInListBtn.setNextFocusableComponent(prioritiseBtn);
        numPatientInListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPatientInListBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout phaseOneJPnlLayout = new javax.swing.GroupLayout(phaseOneJPnl);
        phaseOneJPnl.setLayout(phaseOneJPnlLayout);
        phaseOneJPnlLayout.setHorizontalGroup(
            phaseOneJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phaseOneJPnlLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(phaseOneJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numPatientInListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        phaseOneJPnlLayout.setVerticalGroup(
            phaseOneJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phaseOneJPnlLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(addBtn)
                .addGap(18, 18, 18)
                .addComponent(searchBtn)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn)
                .addGap(18, 18, 18)
                .addComponent(printBtn)
                .addGap(18, 18, 18)
                .addComponent(numPatientInListBtn)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        phaseTwoJPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phase Two", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        prioritiseBtn.setText("Prioritise Patient List");
        prioritiseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prioritiseBtnActionPerformed(evt);
            }
        });

        numPatientInQBtn.setText("No. Patient in Queue");
        numPatientInQBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPatientInQBtnActionPerformed(evt);
            }
        });

        printQueueBtn.setText("Print Queue");
        printQueueBtn.setNextFocusableComponent(dequeueBtn);
        printQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printQueueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout phaseTwoJPnlLayout = new javax.swing.GroupLayout(phaseTwoJPnl);
        phaseTwoJPnl.setLayout(phaseTwoJPnlLayout);
        phaseTwoJPnlLayout.setHorizontalGroup(
            phaseTwoJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phaseTwoJPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(phaseTwoJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(printQueueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numPatientInQBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prioritiseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        phaseTwoJPnlLayout.setVerticalGroup(
            phaseTwoJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phaseTwoJPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(prioritiseBtn)
                .addGap(18, 18, 18)
                .addComponent(numPatientInQBtn)
                .addGap(18, 18, 18)
                .addComponent(printQueueBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        phaseThreeJPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phase Three", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        dequeueBtn.setText("Schedule Next Patient Group");
        dequeueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dequeueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout phaseThreeJPnlLayout = new javax.swing.GroupLayout(phaseThreeJPnl);
        phaseThreeJPnl.setLayout(phaseThreeJPnlLayout);
        phaseThreeJPnlLayout.setHorizontalGroup(
            phaseThreeJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, phaseThreeJPnlLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(dequeueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        phaseThreeJPnlLayout.setVerticalGroup(
            phaseThreeJPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, phaseThreeJPnlLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(dequeueBtn)
                .addContainerGap())
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaccinationprogramme/appointment.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(patientDetailsJPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(phaseThreeJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(phaseTwoJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(phaseOneJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exitBtn)
                                .addGap(114, 114, 114))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(mainTtl)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(mainTtl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientDetailsJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phaseOneJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(phaseTwoJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(phaseThreeJPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(exitBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:   
        //if the prioritize button has not been clicked execute the following code
        if(!prioritiseButtonClicked){
            //if the Name or Age texts fields are blank request the user to enter all required information
            if(nameTf.getText().equalsIgnoreCase("")||ageTf.getText().equalsIgnoreCase("")){
                //if text is missing in the required text fields the user is alerted
                displayTa.append("\n\nPlease enter all required patient information.");
            }else{
                //execute the following code if text is present in text fields
                try{
                //create a new instance of the Person class as P    
                Person p = new Person();
                //set name from text field input
                p.setName(nameTf.getText());
                //set age from text field input
                p.setAge(Integer.parseInt(ageTf.getText()));
                //if the Yes Medical Condition radio button is selected
                if(medConYesRb.isSelected()){
                    //set the object Medical Condition to true
                    p.setMedCon(true);
                }else{
                    //else set the object Medical Condition to false
                    p.setMedCon(false);
                }
                //set the object priority to temp value - zero
                p.setPriority(0);
                //add the object to the ArrayList
                list.add(p);
                //clear the text fields
                nameTf.setText("");
                ageTf.setText("");
                //set the radio button back to default option No
                medConNoRb.setSelected(true);
                //print the patient details that have been added to the text area
                displayTa.append("\n\nPatient "+p.getName()+" has been added to the list.");
            }catch(NumberFormatException n){//if a user enters text into the age textfield - alert the user to the error
                JOptionPane.showMessageDialog(null, "Save unsuccessful, please ensure you have entered a valid number for the patient's age.");
            }catch(Exception n){//this catches any other errors that may occur when saving the object to the ArrayList
                //alerts user of any other error resulting in the patient details not being saved 
                JOptionPane.showMessageDialog(null, "An error has occurred, and the operation was not successful. Please try again.");
                }
            }
        } else {//run this code if the user has already prioritised the initial patient list
            //clear the fields
            nameTf.setText("");
            ageTf.setText("");
            medConNoRb.setSelected(true);
            //alert the user that the patient initial patient list has already been added (user not allowed add additional patients at this stage)
            displayTa.append("\nThe patient list has already been prioritised.\n");
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        //exit the application
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // TODO add your handling code here:
        //if the initial patient list is not empty - execute the following code
        if(!list.isEmpty()){
            Iterator iter;
            iter = list.iterator();
            //iterate through the ArrayList and print the patient details
            displayTa.append("\n\nPatient(s) in initial patient list:\n");
            while(iter.hasNext()){
                Person p;
                p = (Person)iter.next();
                displayTa.append("\nName: "+p.getName()+", Age: "+p.getAge()+", Medical Condition: "+p.getMedCon()+".");
            }
        }else{//print the following message if there are no patients in the initial patient list
            displayTa.append("\nNo patients have been added to the list.\n");
        }
    }//GEN-LAST:event_printBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        searchTerm = nameTf.getText();
        for(Person p:list){
            //the patient name is used as the search term
            if(p.getName().equalsIgnoreCase(searchTerm)){
                displayTa.append("\n\nPatient found:\nName: "+p.getName()+", Age: "+p.getAge()+", Medical Condition: "+p.getMedCon());
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        //the user can delete a patient from the initial patient list by name
        searchTerm = nameTf.getText();
        for(Person p:list){
            //the name enetered in the Name textfield is used as the search term
            if(p.getName().equalsIgnoreCase(searchTerm)){
                //patient is removed from the ArrayList
                list.remove(p);
                displayTa.append("\n\nPatient removed: "+p.getName());             
            }break;
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void prioritiseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prioritiseBtnActionPerformed
        // TODO add your handling code here:
        
        //REFERENCE FOR CONFIRMATION BOX TUTORIAL: https://www.youtube.com/watch?v=ffVY6HGtxH8
        //code for confirm box
        //the below confirmation box is activated when the user clicks the prioritize button
        int confirmation = JOptionPane.showConfirmDialog(this, "Prioritsing the patient list will disable the Phase One menu options, Continue?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        //if user select Yes then execute the following code and prioritise initial patient list
        if(confirmation==JOptionPane.YES_OPTION){
            //the following Phase 1 & 2 buttons will be disabled
            //phase 1 - add patient button disabled
            addBtn.setEnabled(false);
            //phase 1 - search patient button disabled
            searchBtn.setEnabled(false);
            //phase 1 - delete patient button disabled
            deleteBtn.setEnabled(false);
            //phase 1 - print patient button disabled
            printBtn.setEnabled(false);
            //phase 1 - number of patients button disabled
            numPatientInListBtn.setEnabled(false);
            //phase 2 - prioritize patients button disabled
            prioritiseBtn.setEnabled(false);
            
            //the total patients prioritized is printed to screen
            displayTa.append("\n\n"+list.size() + " patient(s) prioritised:\n");      
            
            //the prioritize button has been clicked and the following boolean set to true
            prioritiseButtonClicked = true;

            //set priorities to list
            for (int i = 0; i < list.size(); i++) {
                Person p = list.get(i);
                //if patient age is less than 18
                if(p.getAge() < 18) {
                    //update the object priority to 1
                    p.setPriority(1);
                    //increase the priority one counter by one
                    priorityOneCounter ++;
                //if patient age is equal to or greater than 18 AND patient age equal to or less than 29 AND no medical conditions
                }else if(p.getAge() >= 18 && p.getAge() <= 29 && (!p.getMedCon())){
                    //update the object priority to 2
                    p.setPriority(2);
                    //increase the priority two counter by one
                    priorityTwoCounter ++;
                //if patient age is equal to or greater than 30 AND patient age equal to or less than 44 AND no medical conditions
                }else if(p.getAge() >= 30 && p.getAge() <= 44 && (!p.getMedCon())){
                    //update the object priority to 3
                    p.setPriority(3);
                    //increase the priority three counter by one
                    priorityThreeCounter ++;
                //if patient age is equal to or greater than 45 AND patient age equal to or less than 54 AND no medical conditions
                }else if(p.getAge() >= 45 && p.getAge() <= 54 && (!p.getMedCon())){
                    //update the object priority to 4
                    p.setPriority(4);
                    //increase the priority four counter by one
                    priorityFourCounter ++;
                //if patient age is equal to or greater than 45 AND patient age equal to or less than 64 AND no medical conditions
                }else if(p.getAge() >= 45 && p.getAge() <= 64 && (!p.getMedCon())){
                    //update the object priority to 5
                    p.setPriority(5);
                    //increase the priority five counter by one
                    priorityFiveCounter ++;
                //if patient age is equal to or greater than 18 AND patient age equal to or less than 64 AND has medical conditions
                }else if(p.getAge() >= 18 && p.getAge() <= 64 && (p.getMedCon())){
                    //update the object priority to 6
                    p.setPriority(6);
                    //increase the priority six counter by one
                    prioritySixCounter ++;
                //if patient age is equal to or greater than 65 AND patient age equal to or less than 69
                }else if(p.getAge() >= 65 && p.getAge() <= 69){
                    //update the object priority to 7
                    p.setPriority(7);
                    //increase the priority seven counter by one
                    prioritySevenCounter ++;
                //if patient age is equal to or greater than 70 AND patient age equal to or less than 79
                }else if(p.getAge() >= 70 && p.getAge() <= 79){
                    //update the object priority to 8
                    p.setPriority(8);
                    //increase the priority eight counter by one
                    priorityEightCounter ++;
                //if patient age is equal to or greater than 80 AND patient age equal to or less than 89
                }else if(p.getAge() >= 80 && p.getAge() <= 89){
                    //update the object priority to 9
                    p.setPriority(9);
                    //increase the priority nine counter by one
                    priorityNineCounter ++;
                //if patient age is equal to or greater than 90
                }else if(p.getAge() >= 90){
                    //update the object priority to 10
                    p.setPriority(10);
                    //increase the priority ten counter by one
                    priorityTenCounter ++;
                }else{//print if the above is not executed
                    displayTa.append("\n\nPatient "+p.getName()+" priority not updated.");
                }            
            }

            //add ArrayList elements to Priority Queue myPQueue
            //for every object in the Person ArrayList
            for (int i = 0; i < list.size(); i++) {
                //get the element
                Person p = list.get(i);
                
                //add it to the priority queue using the enqueue() method
                //add the element and priority key
                myPQueue.enqueue(p.getPriority(),p);
            } displayTa.append("\n"+myPQueue.printPQueue());//print the priority key elements after adding
        }
    }//GEN-LAST:event_prioritiseBtnActionPerformed
    
    private void numPatientInQBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPatientInQBtnActionPerformed
        // TODO add your handling code here:
        //print the size of the priority queue
        displayTa.append("\n\nThere is " + myPQueue.size() + " patient(s) currently in the queue:\n");
        
        //print how many patients are currently in each priority group
        displayTa.append("\nThere is " + priorityOneCounter + " patient(s) in priority group one.");
        displayTa.append("\nThere is " + priorityTwoCounter + " patient(s) in priority group two.");
        displayTa.append("\nThere is " + priorityThreeCounter + " patient(s) in priority group three.");
        displayTa.append("\nThere is " + priorityFourCounter + " patient(s) in priority group four.");
        displayTa.append("\nThere is " + priorityFiveCounter + " patient(s) in priority group five.");
        displayTa.append("\nThere is " + prioritySixCounter + " patient(s) in priority group six.");
        displayTa.append("\nThere is " + prioritySevenCounter + " patient(s) in priority group seven.");
        displayTa.append("\nThere is " + priorityEightCounter + " patient(s) in priority group eight.");
        displayTa.append("\nThere is " + priorityNineCounter + " patient(s) in priority group nine.");
        displayTa.append("\nThere is " + priorityTenCounter + " patient(s) in priority group ten.");
    }//GEN-LAST:event_numPatientInQBtnActionPerformed

    private void printQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printQueueBtnActionPerformed
        // TODO add your handling code here:
        //if the priority queue is not empty execute the following code
        if(!myPQueue.isEmpty()){
            displayTa.append("\n\nPatient(s) currently in the priority queue:\n");
            //print the priority queue using the printPQueue method
            displayTa.append("\n"+myPQueue.printPQueue());
        }else{//alert the user that there are no patients in the priority queue
            displayTa.append("\n\nThere are currently no patients in the queue.");
        }
    }//GEN-LAST:event_printQueueBtnActionPerformed

    private void dequeueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dequeueBtnActionPerformed
        // TODO add your handling code here:
        //if the prioritize button has been clicked - execute the following code
        if(!prioritiseBtn.isEnabled()){            
            
            //increase the schedule button counter by one
            scheduleButtonCounter ++;       
            
            //for each scheduleButtonCounter click count - execute the following code
            switch (scheduleButtonCounter) {
                //if the scheduleButtonCounter has been clicked once - print the following
                case 1:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 10.");
                    displayTa.append("\nThere is " + priorityTenCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked twice - print the following
                case 2:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 9.");
                    displayTa.append("\nThere is " + priorityNineCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked three times - print the following
                case 3:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 8.");
                    displayTa.append("\nThere is " + priorityEightCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked four times - print the following
                case 4:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 7.");
                    displayTa.append("\nThere is " + prioritySevenCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked five times - print the following
                case 5:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 6.");
                    displayTa.append("\nThere is " + prioritySixCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked six times - print the following
                case 6:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 5.");
                    displayTa.append("\nThere is " + priorityFiveCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked seven times - print the following
                case 7:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 4.");
                    displayTa.append("\nThere is " + priorityFourCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked eight times - print the following
                case 8:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 3.");
                    displayTa.append("\nThere is " + priorityThreeCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked nine times - print the following
                case 9:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 2.");
                    displayTa.append("\nThere is " + priorityTwoCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked 10 times - print the following
                case 10:
                    displayTa.append("\n\nThe next group to be scheduled is priority group 1.");
                    displayTa.append("\nThere is " + priorityOneCounter + " patient(s) in this priority group:");
                    break;
                //if the scheduleButtonCounter has been clicked eleven times - print the following
                case 11:
                    displayTa.append("\n\nAll priority groups have been scheduled.");
                    break;
                default:
                    break;
            }
                        
            for (int i = 0; i < list.size(); i++) {
                Person p = list.get(i);
                
                //if the Person element priority list equals 10 - execute the following code
                if(p.getPriority() == 10 && scheduleButtonCounter == 1){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();
                    
                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");
                    
                    //decrease the priority 10 counter by one
                    priorityTenCounter --;
                //if the Person element priority list equals 9 - execute the following code
                } else if(p.getPriority() == 9 && scheduleButtonCounter == 2){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();
                    
                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityNineCounter --;
                //if the Person element priority list equals 8 - execute the following code
                } else if(p.getPriority() == 8 && scheduleButtonCounter == 3){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityEightCounter --;
                //if the Person element priority list equals 7 - execute the following code
                } else if(p.getPriority() == 7 && scheduleButtonCounter == 4){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    prioritySevenCounter --;
                //if the Person element priority list equals 6 - execute the following code
                } else if(p.getPriority() == 6 && scheduleButtonCounter == 5){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    prioritySixCounter --;
                //if the Person element priority list equals 5 - execute the following code
                } else if(p.getPriority() == 5 && scheduleButtonCounter == 6){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityFiveCounter --;
                //if the Person element priority list equals 4 - execute the following code
                } else if(p.getPriority() == 4 && scheduleButtonCounter == 7){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityFourCounter --;
                //if the Person element priority list equals 3 - execute the following code
                } else if(p.getPriority() == 3 && scheduleButtonCounter == 8){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityThreeCounter --;
                //if the Person element priority list equals 2 - execute the following code
                } else if(p.getPriority() == 2 && scheduleButtonCounter == 9){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityTwoCounter --;
                //if the Person element priority list equals 1 - execute the following code
                } else if(p.getPriority() == 1 && scheduleButtonCounter == 10){
                    //remove the highest priority element from the priority queue using the dequeue method
                    PQElement pqelem = (PQElement)myPQueue.dequeue(0);
                    Person p1 = (Person)pqelem.getElement();

                    //once the element has been removed - print the patient details
                    displayTa.append("\nPatient Scheduled: " + p1.getName());
                    displayTa.append(" ( Age: " + p1.getAge());
                    displayTa.append(" /  Medical Condition: " + p1.getMedCon());
                    displayTa.append(" /  Priority Group: " + pqelem.getKey()+").");

                    priorityOneCounter --;
                //else if the priority queue is empty - print the following    
                } else if(myPQueue.isEmpty()){
                    displayTa.append("\n\nThere are no more patients left to schedule.");
                    break;
                } else{

                }           
            }
        }else{//if the user tries to schedule the priority queue before prioritizing the initial patient list the following is printed
            displayTa.append("\n\nPlease first prioritise the patient list in Phase Two.");
        }  
        
    }//GEN-LAST:event_dequeueBtnActionPerformed

    private void numPatientInListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPatientInListBtnActionPerformed
        // TODO add your handling code here:
        //the initial patient list size is printed
        displayTa.append("\n\nThere is " + list.size() + " patient(s) in the initial patient list.");
    }//GEN-LAST:event_numPatientInListBtnActionPerformed

    private void medConYesRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medConYesRbActionPerformed

    }//GEN-LAST:event_medConYesRbActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTf;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton dequeueBtn;
    private javax.swing.JTextArea displayTa;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainTtl;
    private javax.swing.JLabel medConLbl;
    private javax.swing.JRadioButton medConNoRb;
    private javax.swing.ButtonGroup medConRbg;
    private javax.swing.JRadioButton medConYesRb;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTf;
    private javax.swing.JButton numPatientInListBtn;
    private javax.swing.JButton numPatientInQBtn;
    private javax.swing.JPanel patientDetailsJPnl;
    private javax.swing.JPanel phaseOneJPnl;
    private javax.swing.JPanel phaseThreeJPnl;
    private javax.swing.JPanel phaseTwoJPnl;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton printQueueBtn;
    private javax.swing.JButton prioritiseBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
